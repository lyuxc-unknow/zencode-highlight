{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "ZenCode",
	"patterns": [
		{ "include": "#captures" }
	],
	"repository": {
        "captures": {
            "patterns": [
                { "include": "#commentLine" },
                { "include": "#commentBlock"},
                { "include": "#statementImport" },
                { "include": "#genericType" },
                { "include": "#preprocessor" },
                { "include": "#keywords" },
                { "include": "#literalBoolean" },
                { "include": "#literalNumber" },
                { "include": "#literalStringDouble" },
                { "include": "#literalStringSingle" },
                { "include": "#function" },
                { "include": "#identifier" },
                { "include": "#itemTag"}
            ]
        },
		"keywords": {
			"patterns": [
                {
                    "name": "keyword.control.zencode",
                    "match": "\\b(abstract|alias|as|bool|break|byte|case|catch|char|class|continue|default|destructable|do|double|else|enum|expand|extern|export|false|final|finally|float|for|function|get|if|in|immutable|implements|implicit|import|int|interface|internal|is|lock|long|match|multithreaded|mut|new|null|override|panic|private|protected|public|return|sbyte|set|shared|short|static|string|struct|super|switch|this|threadlocked|throw|throws|true|try|uint|ulong|unique|ushort|usize|variant|virtual|void|weak|while)\\b"
                },
                {
                    "match": "\\b(var|val|static|const)\\b",
                    "name": "keyword.control.zencode"   
                }
            ]
        },
		"literalStringDouble": {
			"name": "string.quoted.double.zencode",
			"begin": "\"",
			"end": "\"",
			"patterns": [{
				"name": "constant.character.escape.zencode",
				"match": "\\\\."
			}]
		},
		"literalStringSingle": {
			"name": "string.quoted.double.zencode",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.zencode",
					"match": "\\\\."
				}
			]
		},
		"literalBoolean": {
			"patterns": [{
				"name": "constant.boolean.zencode",
				"match": "\\b(true|false)\\b"
			}]
		},
        "literalNumber": {
            "patterns": [{
                "name": "constant.numeric.zencode",
                "match": "\\b([0-9]+(\\.[0-9]+)?)\\b"
            }]
        },
        "preprocessor": {
            "name": "meta.preprocessor.zencode",
            "match": "^(\\s*)(#)(debug|loader|loadfirst|loadlast|priority|modloaded|modloader|replace|snip|noload)",
			"captures": {
				"1": {
					"name": "keyword.control.zencode"
				},
				"2": {
					"name": "keyword.control.zencode"
				},
				"3": {
					"name": "variable.language.zencode"
				}
			}

        },
        "function": {
            "begin": "\\b([^-\\s`!@#\\$%\\^&*~\\(\\)_+=;:'\"\\{\\}\\[\\]\\\\|\\/\\?,\\.<>]+)\\(",
            "end": "\\)",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function.zencode"
                }
            },
            "patterns": [{ "include": "#captures" }]
        },
        "genericType": {
            "begin": "\\b([^-\\s`!@#\\$%\\^&*~\\(\\)_+=;:'\"\\{\\}\\[\\]\\\\|\\/\\?,\\.<>]+)<",
            "end": ">",
            "beginCaptures": {
                "1": { "name": "variable.name.zencode" }
            },
            "patterns": [
                { "include": "#identifier" },
                { "match": "," }
            ]
        },
        "identifier": {
            "name": "variable.name.zencode",
            "match": "\\b([^-\\s`!@#\\$%\\^&*~\\(\\)+=;:'\"\\{\\}\\[\\]\\\\|\\/\\?,\\.<>]+)\\b"
        },
        "statementImport": {
            "match": "(import)\\s+((?:[a-zA-Z0-9_]+\\.)*)([A-Za-z0-9_]+);",
            "captures": {
                "1": { "name": "keyword.control.zencode" },
                "2": { "name": "keyword.control.zencode" },
                "3": { "name": "entity.name.type.zencode" }
            }
        },
        "commentLine": {
            "name": "comment.line.zencode",
            "match": "\\s*((#|//).*$\\n?)"
        },
        "commentBlock": {
            "name": "comment.block.zencode",
            "begin": "\\/\\*",
            "end": "\\*\\/",
            "patterns": [
                {
                    "name": "comment.block.documentation.zencode",
                    "match": "@\\w+"
                }
            ]
        },
        "itemTag": {
            "patterns": [
                {
                    "name":"keyword.other.zencode",
                    "match": "(<)\\b(.*?)(:(.*?(:(\\*|\\d+)?)?)?)(>)",
                    "captures": {
                        "1": {
							"name": "keyword.control.zencode"
						},
						"2": {
							"name": "entity.name.tag.zencode"
						}
                    }
                }
            ]
        }
	},
	"scopeName": "source.zencode"
}